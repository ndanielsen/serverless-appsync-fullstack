service: serverless-graphql-appsync-es

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2

plugins:
  - serverless-pseudo-parameters
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-appsync-plugin
  - serverless-webpack
  - serverless-stack-output
  - aws-amplify-serverless-plugin


custom:
  region: ${env:AWS_REGION, 'us-west-2'}
  stage: ${opt:stage, self:provider.stage}
  amplify:
    - filename: ../appsync-client/src/aws-exports.js
      type: javascript
      appClient: CognitoUserPoolClient
      s3bucket: UserFiles
    - filename: ../appsync-client/schema.json
      type: schema.json
    - filename: ../appsync-client/operations.graphql
      type: graphql

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      test:
        sources:
          - table: Users
            sources: [seed-data/Users.json]
  webpackIncludeModules: true
  appSync:
    name:  miniTwitter # defaults to api
    # apiId # only required for update-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: ${self:custom.region} # required # region
      defaultAction: ALLOW
      userPoolId: UserPoolId # replace this with your Cognito User Pool Id
    # region: # defaults to provider region
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: myDynamoDB
        type: Query
        field: getUserInfo
        request: "getUserInfo-request-mapping-template.txt"
        response: "getUserInfo-response-mapping-template.txt"
      - dataSource: myDynamoDB
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.txt"
        response: "meInfo-response-mapping-template.txt"
      - dataSource: myLambda
        type: User
        field: favourites_count
        request: "getFavourites-request-mapping-template.txt"
        response: "getFavourites-response-mapping-template.txt"
    schema: # defaults schema.graphql
    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: myDynamoDB
        description: 'Users table'
        config:
          tableName: 'ESUsers'
          # serviceRoleArn: "arn:aws:iam::#{AWS::AccountId}:role/Dynamo-${self:custom.appSync.serviceRole}"
      - type: AWS_LAMBDA
        name: myLambda
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          # serviceRoleArn: "arn:aws:iam::#{AWS::AccountId}:role/Lambda-${self:custom.appSync.serviceRole}"

functions:
  graphql:
    handler: handler.graphqlHandler

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: handle
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: 'ESUsers'

    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "AppSyncDynamoDBServiceRolePolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - "arn:aws:dynamodb:us-east-1:*:table/ESUsers"
                    - "arn:aws:dynamodb:us-east-1:*:table/ESUsers/*"
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:us-east-1:#{AWS::AccountId}:function:serverless-graphql-appsync-es-production-graphql"
                    - "arn:aws:lambda:us-east-1:#{AWS::AccountId}:function:serverless-graphql-appsync-es-production-graphql:*"


    # The federated identity for our user pool to auth with
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        # Generate a name based on the stage
        IdentityPoolName: ${self:custom.stage}IdentityPool
        # Don't allow unathenticated users
        AllowUnauthenticatedIdentities: false
        # Link to our User Pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
              
    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
            
    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:custom.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:custom.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

  # Print out the Id of the User Pool that is created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient

        
    # Print out the Id of the Identity Pool that is created
    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
